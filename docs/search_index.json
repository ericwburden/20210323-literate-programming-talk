[["presenting.html", "Presenting…", " Presenting… In this presentation, we will be discussing literate programming, what it is, and how R and R Markdown provide developers with tools to take advantage of this approach. "],["literate-programming.html", "1 Literate Programming", " 1 Literate Programming From Wikipedia: Literate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated.1 From Eric: It’s basically writing and explaining your code all in one file, like comments on steroids. Sewell, Wayne (1989). “Weaving a Program: Literate Programming in WEB”. Van Nostrand Reinhold. ISBN 0-442-31946-0↩︎ "],["r-and-r-markdown.html", "2 R and R Markdown 2.1 The R Language 2.2 R Markdown", " 2 R and R Markdown 2.1 The R Language From the CRAN (Comprehensive R Archive Network): R is a system for statistical computation and graphics. It consists of a language plus a run-time environment with graphics, a debugger, access to certain system functions, and the ability to run programs stored in script files.2 Some Facts: R is open source R is backed by the R Software Foundation R is a descendant of ‘S’, which was released in 1976 by Bell Labs R was first introduced to the public in 1993, 2 years after the first version of Python The first stable beta was released in 2000 As of March 2021, R was ranked 12th in the Redmonk rankings3 2.2 R Markdown From RStudio: R Markdown is a file format for making dynamic documents with R. An R Markdown document is written in markdown (an easy-to-write plain text format) and contains chunks of embedded R code…4 R Markdown is essentially a literate programming tool with primary support for the R language, and secondary support for a number of other programming languages as well.5 Here’s what an R Markdown file looks like: https://cran.r-project.org/doc/FAQ/R-FAQ.html#What-is-R_003f↩︎ https://redmonk.com/sogrady/2021/03/01/language-rankings-1-21/↩︎ https://rmarkdown.rstudio.com/articles_intro.html↩︎ https://en.wikipedia.org/wiki/Literate_programming#Literate_programming_practices↩︎ "],["r-markdown-in-action.html", "3 R Markdown in Action", " 3 R Markdown in Action In this example, we will use SQL to extract data from a database (SQLite file) and R to analyze the data to determine which actor or actress was most likely to appear in a Martin Sheen movie, other than Martin Sheen himself. This exercise is loosely based on the 2020 version of Harvard’s open CS50x online course.6 This is Martin Sheen, potentially best known as the father of Charlie Sheen, also a famous actor. First, we need to make a connection to the database: db_file &lt;- &quot;src/data/movies.db&quot; con &lt;- DBI::dbConnect(RSQLite::SQLite(), db_file) Let’s start by extracting the data from the database file we need to conduct this analysis into the movie_data variable: select movies.id as movie_id ,movies.title as movie_title ,movies.year as movie_year ,people.name as star_name ,people.birth as star_dob from movies join stars on stars.movie_id = movies.id join people on stars.person_id = people.id; The movie_data data frame contains the following data: head(movie_data) ## movie_id movie_title movie_year star_name star_dob ## 1 15724 Dama de noche 1993 Rafael Sánchez Navarro NA ## 2 15724 Dama de noche 1993 Cecilia Toussaint 1958 ## 3 15724 Dama de noche 1993 Miguel Córcega 1929 ## 4 15724 Dama de noche 1993 Regina Orozco 1964 ## 5 31458 El huésped del sevillano 1970 Malik Abidin NA ## 6 31458 El huésped del sevillano 1970 María José Alfonso 1940 With the data in an R data frame, we can identify all movies starring Martin Sheen by name and ID by: Filtering movie_data to only records where star_name is ‘Martin Sheen’ and star_dob is 1958. Keeping only the movie_id and movie_title fields. De-duplicating the results to ensure one record per unique combination of movie_id, movie_title, and movie_year. library(dplyr) martin_sheen_movies &lt;- movie_data %&gt;% filter(star_name == &quot;Martin Sheen&quot;, star_dob == 1940) %&gt;% select(movie_id, movie_title, movie_year) %&gt;% distinct() head(martin_sheen_movies) ## movie_id movie_title movie_year ## 1 67497 No Drums, No Bugles 1972 ## 2 69084 Pickup on 101 1972 ## 3 69158 Rage 1972 ## 4 69762 Badlands 1973 ## 5 71745 The Legend of Earl Durand 1974 ## 6 74292 The Cassandra Crossing 1976 The script below counts the number of Martin Sheen movies released, by decade, and plots the result. library(ggplot2) movies_by_decade &lt;- martin_sheen_movies %&gt;% mutate(decade = (movie_year %/% 10) * 10) %&gt;% group_by(decade) %&gt;% tally() ggplot(movies_by_decade, aes(decade, n)) + geom_col() + geom_text(aes(label = n), vjust = 1.2, color = &quot;white&quot;) + theme_minimal() + labs( x = &quot;Decade&quot;, y = &quot;# of Movies Released&quot;, title = &quot;Count of Movies Starring Martin Sheen, by Decade&quot; ) Given that listing of movies, let’s identify which actor or actress other than Martin Sheen appears the most times: most_frequent_costar &lt;- movie_data %&gt;% inner_join(martin_sheen_movies, by = c(&quot;movie_id&quot;, &quot;movie_title&quot;, &quot;movie_year&quot;)) %&gt;% filter(star_name != &quot;Martin Sheen&quot;) %&gt;% group_by(star_name) %&gt;% tally() %&gt;% filter(n == max(n)) as.list(most_frequent_costar) ## $star_name ## [1] &quot;Phil Cousineau&quot; ## ## $n ## [1] 4 It’s this fellow here. To finish, up, let’s identify which four movies Martin Sheen and Phil Cousineau appeared in together: which_four_movies &lt;- movie_data %&gt;% inner_join(martin_sheen_movies, by = c(&quot;movie_id&quot;, &quot;movie_title&quot;, &quot;movie_year&quot;)) %&gt;% filter(star_name == &quot;Phil Cousineau&quot;) %&gt;% select(movie_id, movie_title) %&gt;% distinct() knitr::kable(which_four_movies) movie_id movie_title 4720236 American Hercules: Babe Ruth 5092962 The Hammer of Hank Aaron 5355018 The Immortal: Ted Williams 5355180 Iron Knight: Lou Gehrig https://cs50.harvard.edu/x/2020/psets/7/movies/↩︎ "],["output-formats.html", "4 Output Formats", " 4 Output Formats The following output formats are available to use with R Markdown Documents7 Documents html_notebook - Interactive R Notebooks html_document - HTML document w/ Bootstrap CSS pdf_document - PDF document (via LaTeX template) word_document - Microsoft Word document (docx) odt_document - OpenDocument Text document rtf_document - Rich Text Format document md_document - Markdown document (various flavors) tufte::tufte_handout - PDF handouts in the style of Edward Tufte tufte::tufte_html - HTML handouts in the style of Edward Tufte tufte::tufte_book - PDF books in the style of Edward Tufte html_vignette - R package vignette (HTML) github_document - GitHub Flavored Markdown document Presentations (slides) ioslides_presentation - HTML presentation with ioslides revealjs::revealjs_presentation - HTML presentation with reveal.js slidy_presentation - HTML presentation with W3C Slidy beamer_presentation - PDF presentation with LaTeX Beamer powerpoint_presentation - PowerPoint presentation More flexdashboard::flex_dashboard - Interactive dashboards bookdown::bookdown_site - E-Books in a variety of formats rmarkdown_site - Simple websites blogdown - Full features websites powered by Hugo shiny_documents - Interactive documents powered by the Shiny runtime learnr::tutorial - Web-based classes and learning exercises In fact, this website/presentation was written entirely in R Markdown (with a smidge of YAML and CSS). YOu can view this presentation anytime online8 and the source code is publicly available on GitHub.9 https://rmarkdown.rstudio.com/lesson-9.html↩︎ https://ericwburden.github.io/20210323-literate-programming-talk↩︎ https://github.com/ericwburden/20210323-literate-programming-talk↩︎ "]]
